package com.ithd.stripe.stripepaymentsystem.service.impl;import com.ithd.stripe.stripepaymentsystem.exceptions.webexceptions.AddressNotFoundException;import com.ithd.stripe.stripepaymentsystem.exceptions.webexceptions.ObjectNullException;import com.ithd.stripe.stripepaymentsystem.model.request.StripeCustomerRequest;import com.ithd.stripe.stripepaymentsystem.model.response.BaseApiStripeResponse;import com.ithd.stripe.stripepaymentsystem.service.action.CustomerAction;import com.ithd.stripe.stripepaymentsystem.service.service.StripeCustomerService;import com.ithd.stripe.stripepaymentsystem.util.GsonConverter;import com.stripe.exception.StripeException;import com.stripe.model.Customer;import com.stripe.model.CustomerCollection;import com.stripe.param.CustomerCreateParams;import lombok.RequiredArgsConstructor;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import java.util.HashMap;import java.util.Map;import static com.ithd.stripe.stripepaymentsystem.util.ResponseConverter.falseAlert;import static com.ithd.stripe.stripepaymentsystem.util.ResponseConverter.trueAlert;import static com.ithd.stripe.stripepaymentsystem.util.StringConverter.covertErrorMessage;@Service@RequiredArgsConstructorpublic class StripeCustomerServiceImplementation implements StripeCustomerService, CustomerAction {    private final GsonConverter gsonConverter;    @Override    public ResponseEntity<BaseApiStripeResponse<?>> create(            StripeCustomerRequest stripeCustomerRequest) throws StripeException {        if (null == stripeCustomerRequest) throw new ObjectNullException();        BaseApiStripeResponse<?> response = creatAction(stripeCustomerRequest);        return new ResponseEntity<>(response, HttpStatus.valueOf(response.getCode()));    }    @Override    public ResponseEntity<BaseApiStripeResponse<?>> findById(            StripeCustomerRequest stripeCustomerRequest) throws StripeException {        if (null == stripeCustomerRequest) throw new ObjectNullException();        BaseApiStripeResponse<?> response = findByIdAction(stripeCustomerRequest);        return new ResponseEntity<>(response, HttpStatus.valueOf(response.getCode()));    }    @Override    public ResponseEntity<BaseApiStripeResponse<?>> deleteById(StripeCustomerRequest stripeCustomerRequest) throws StripeException {        if (null == stripeCustomerRequest) throw new ObjectNullException();        BaseApiStripeResponse<?> response = deleteByIdAction(stripeCustomerRequest);        return new ResponseEntity<>(response, HttpStatus.valueOf(response.getCode()));    }    @Override    public ResponseEntity<BaseApiStripeResponse<?>> findAll(StripeCustomerRequest stripeCustomerRequest) throws StripeException {        if (null == stripeCustomerRequest) throw new ObjectNullException();        BaseApiStripeResponse<?> response = findAllAction(stripeCustomerRequest);        return new ResponseEntity<>(response, HttpStatus.valueOf(response.getCode()));    }    @Override    public BaseApiStripeResponse<?> creatAction(StripeCustomerRequest stripeCustomerRequest)            throws StripeException {        if (null == stripeCustomerRequest) throw new ObjectNullException();        if (null == stripeCustomerRequest.getAddress1()) throw new AddressNotFoundException();        CustomerCreateParams.Address customerCreateParamsAddress =                CustomerCreateParams.Address.builder()                        .setLine1(stripeCustomerRequest.getAddress1())                        .setLine2(stripeCustomerRequest.getAddress2())                        .setPostalCode(stripeCustomerRequest.getPostalCode())                        .setCity(stripeCustomerRequest.getCity())                        .setState(stripeCustomerRequest.getState())                        .setCountry(stripeCustomerRequest.getCountry())                        .build();        CustomerCreateParams customerCreateParams =                CustomerCreateParams.builder()                        .setName(                                stripeCustomerRequest.getFirstName() + " " + stripeCustomerRequest.getLastName())                        .setEmail(stripeCustomerRequest.getEmail())                        .setPhone(stripeCustomerRequest.getPhoneNumber())                        .setAddress(customerCreateParamsAddress)                        .build();        System.out.println();        Customer customer = Customer.create(customerCreateParams);        Map<String, Object> body = gsonConverter.convertCustomerToMaps(customer);        if (null == body) {            return falseAlert(body);        }        return trueAlert(body);    }    @Override    public BaseApiStripeResponse<?> findByIdAction(StripeCustomerRequest stripeCustomerRequest)            throws StripeException {        Map<String, Object> body = new HashMap<>();        if (null == stripeCustomerRequest) throw new ObjectNullException();        try {            Customer customer = Customer.retrieve(stripeCustomerRequest.getCustomerId());            body = gsonConverter.convertCustomerToMaps(customer);            if (null == body) {                return falseAlert(body);            }        } catch (StripeException e) {            body.put("message", covertErrorMessage(e.getMessage()));        }        return trueAlert(body);    }    @Override    public BaseApiStripeResponse<?> deleteByIdAction(StripeCustomerRequest stripeCustomerRequest) throws StripeException {        Map<String, Object> body = new HashMap<>();        try {            Customer customer = Customer.retrieve(stripeCustomerRequest.getCustomerId());            Customer deletedCustomer = customer.delete();            body = gsonConverter.convertCustomerToMaps(deletedCustomer);            if (null == body) {                return falseAlert(body);            }        } catch (StripeException e) {            body.put("message", covertErrorMessage(e.getMessage()));            return falseAlert(body);        }        return trueAlert(body);    }    @Override    public BaseApiStripeResponse<?> findAllAction(StripeCustomerRequest stripeCustomerRequest) throws StripeException {        Map<String, Object> params = new HashMap<>();        if(null == stripeCustomerRequest.getLimit() || stripeCustomerRequest.getLimit() == 0){            params.put("limit", 3);        }else {            params.put("limit", stripeCustomerRequest.getLimit());        }        CustomerCollection customers = Customer.list(params);        Map<String, Object> body = gsonConverter.convertCustomerToMaps(customers);        if (null == body) {            return falseAlert(body);        }        return trueAlert(body);    }}